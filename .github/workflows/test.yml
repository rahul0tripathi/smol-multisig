name: Anchor Tests

on:
  push:
    branches: [main]
    paths:
      - 'tokens/**'
      - 'stateless_multisig/**'
      - '.github/workflows/**'
      - 'Cargo.lock'
      - 'Cargo.toml'
  pull_request:
    branches: [main]
    paths:
      - 'tokens/**'
      - 'stateless_multisig/**'
      - '.github/workflows/**'
      - 'Cargo.lock'
      - 'Cargo.toml'
  workflow_dispatch:

env:
  SOLANA_CLI_VERSION: 2.0.25
  NODE_VERSION: 18.14.2
  ANCHOR_CLI_VERSION: 0.30.1
  CACHE_KEY_PREFIX: v1

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.system-deps-cache.outputs.cache-hit }}
    
    steps:
      - name: System Dependencies Cache
        id: system-deps-cache
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ env.CACHE_KEY_PREFIX }}-system-deps-${{ runner.os }}

      - name: Install System Dependencies
        if: steps.system-deps-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev
          
  test_matrix:
    needs: setup-environment
    strategy:
      fail-fast: false
      matrix:
        project: [tokens, stateless_multisig]
    
    name: Test ${{ matrix.project }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      # Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install and cache Anchor CLI
      - name: Cache Anchor CLI
        id: cache-anchor-cli
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm/global
            ~/.cargo/bin/anchor
          key: ${{ env.CACHE_KEY_PREFIX }}-anchor-cli-${{ runner.os }}-${{ env.ANCHOR_CLI_VERSION }}

      - name: Install Anchor CLI
        if: steps.cache-anchor-cli.outputs.cache-hit != 'true'
        run: npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }} yarn

      # Setup and cache Solana
      - name: Cache Solana
        id: cache-solana
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/solana/
            ~/.local/share/solana/
            ~/.config/solana/
          key: ${{ env.CACHE_KEY_PREFIX }}-solana-${{ runner.os }}-${{ env.SOLANA_CLI_VERSION }}

      - name: Install Solana
        if: steps.cache-solana.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)"
          source $HOME/.profile
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version
          solana-keygen new --no-bip39-passphrase
          solana config set --url localhost

      # Cache Rust/Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ${{ matrix.project }}/target
          key: ${{ env.CACHE_KEY_PREFIX }}-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '${{ matrix.project }}/programs/**/Cargo.toml') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ env.CACHE_KEY_PREFIX }}-cargo-${{ runner.os }}-

      # Project specific steps
      - name: Install project dependencies
        working-directory: ${{ matrix.project }}
        run: yarn install --frozen-lockfile

      - name: Build project
        working-directory: ${{ matrix.project }}
        run: |
          anchor build
        env:
          RUST_BACKTRACE: 1

      - name: Run Anchor tests
        working-directory: ${{ matrix.project }}
        run: |
          anchor test
        env:
          RUST_BACKTRACE: 1
          RUST_LOG: debug

      # Artifact collection
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-artifacts
          path: |
            ${{ matrix.project }}/target/deploy/
            ${{ matrix.project }}/target/debug/
            ${{ matrix.project }}/tests/*.log
          retention-days: 7
          compression-level: 9

      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-test-logs
          path: |
            ${{ matrix.project }}/target/deploy/*.log
            ${{ matrix.project }}/tests/*.log
          retention-days: 3
          compression-level: 9

  cleanup:
    needs: test_matrix
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test_matrix.result }}" != "success" ]; then
            echo "Tests failed. Check the artifacts for more details."
            exit 1
          fi